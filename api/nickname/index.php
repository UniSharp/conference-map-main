<?php
// Expires in the past
header("Expires: Mon, 26 Jul 1990 05:00:00 GMT");
// Always modified
header("Last-Modified: ".gmdate("D, d M Y H:i:s")." GMT");
// HTTP/1.1
header("Cache-Control: no-store, no-cache, must-revalidate");
header("Cache-Control: post-check=0, pre-check=0", false);
// HTTP/1.0
header("Pragma: no-cache");

require_once dirname(__FILE__) . '/../../lib/UserClient.inc';
require_once dirname(__FILE__) . '/../../lib/UsSecurity.inc';

function do_response($http_code, $status_code, $message, $data = NULL) {
    header('Content-Type: application/json; charset=utf-8');
    header('X-PHP-Response-Code: '. $http_code, true, $http_code);
    $response['response_status'] = array(
        "code" => $status_code,
        "message" => "$message",
    );
    if ($data) {
        $response['response_data'] = $data;
    }
    $json =  json_encode($response);
    if (json_last_error() !== JSON_ERROR_NONE) {
        die('Internal Error');
    }
    echo $json;
    exit();
}


// Source from: http://stackoverflow.com/questions/6768793/php-get-the-full-url
// XXX need SECURITY review.
function full_url()
{
    $s = empty($_SERVER["HTTPS"]) ? '' : ($_SERVER["HTTPS"] == "on") ? "s" : "";
    $sp = strtolower($_SERVER["SERVER_PROTOCOL"]);
    $protocol = substr($sp, 0, strpos($sp, "/")) . $s;
    $port = ($_SERVER["SERVER_PORT"] == "80") ? "" : (":".$_SERVER["SERVER_PORT"]);
    return $protocol . "://" . $_SERVER['SERVER_NAME'] . $port . $_SERVER['REQUEST_URI'];
}
$redis_conf = false;
$UaClient = NULL;
$http_request_method = $_SERVER['REQUEST_METHOD'];

//////////////////////////////
///////// HTTP GET ///////////
//////////////////////////////

if ($http_request_method == 'GET') {
    /*
    // XXX for future restful API implementation
    $url = full_url();
    $url_data =  parse_url($url);
    if (!$url_data) {
        do_response(500, 50000, "Internal error");
    }
    */

    $nickname = @$_COOKIE['nickname'];

    $data['nickname'] = $nickname;
    do_response(200, 20000, "OK", $data);

}

//////////////////////////////
///////// HTTP POST ///////////
//////////////////////////////

try {
    $UserClient = new UserClient($redis_conf);
} catch (Exception $e) {
    // ignore exception.
}

// TODO SECURITY XSS filter
// TODO SECURITY add crumb check for member_id (must be generated by the core/random/ api)


$json = @$_POST['data'];
//$json = filter_var($json,);
//die($json);

// 2013.08.03 11:45 = 1375501500
// 2013.08.03 13:30 = 1375507800
// room 102 = 1:0:4:1
// room 101CD = 1:11:9:1
$sample_json = <<<EOF
{
    "request_data": {
        "nickname":"{nickname}"
    }
}
EOF;

// Uncomment it only when debugging
//$json = $sample_json;

$req_array = NULL;
if (empty($json) || ($req_array = json_decode($json, true)) === NULL) {
    do_response(400, 40000, "a Incorrect input");
}

// When request not empty
$status = 20000;
isset($req_array['request_data']) || $status = 40001;
isset($req_array['request_data']['nickname']) || $status = 40003;

if (20000 !== $status) {
    do_response(400, $status, "b Incorrect input");
}


$nickname = @$req_array['request_data']['nickname'];


if (mb_strlen($nickname, 'UTF-8') > 20) {
    do_response(400, 40000, "c Incorrect input");
}

UsSecurity::filter_xss($nickname);


$data_array = array();
if ($nickname) {
    $data_array['nickname'] = $nickname;
}

if (count($data_array) <= 0) {
    do_response(400, 40002, "Oops, empty input");
}


    setcookie('nickname', $nickname, time() + 604800, '/');
    do_response(200, 20000, "OK");


