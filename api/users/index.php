<?php
/*
 * insert / get user info
 * Usage:
 *  1. Get user
 *      HTTP GET http://domain/api/users/?id={id}
 *
 *  2. Insert user
 *      HTTP POST http://domain/api/users/
 *      data={json_data}
 *
 * TODO: handle update.
 * TODO: check key on cookie
*/
require_once dirname(__FILE__) . '/../../lib/UserClient.inc';
require_once dirname(__FILE__) . '/../../lib/UsSecurity.inc';
require_once dirname(__FILE__) . '/../../conf/config.inc';
require_once dirname(__FILE__) . '/../../lib/UsConfigCache.inc';

function do_response($http_code, $status_code, $message, $data = NULL) {
    header('Content-Type: application/json; charset=utf-8');
    header('X-PHP-Response-Code: '. $http_code, true, $http_code);
    $response['response_status'] = array(
        "code" => $status_code,
        "message" => "$message",
    );
    if ($data) {
        $response['response_data'] = $data;
    }
    $json =  json_encode($response);
    if (json_last_error() !== JSON_ERROR_NONE) {
        die('Internal Error');
    }
    echo $json;
    exit();
}


// Source from: http://stackoverflow.com/questions/6768793/php-get-the-full-url
// XXX need SECURITY review.
function full_url()
{
    $s = empty($_SERVER["HTTPS"]) ? '' : ($_SERVER["HTTPS"] == "on") ? "s" : "";
    $sp = strtolower($_SERVER["SERVER_PROTOCOL"]);
    $protocol = substr($sp, 0, strpos($sp, "/")) . $s;
    $port = ($_SERVER["SERVER_PORT"] == "80") ? "" : (":".$_SERVER["SERVER_PORT"]);
    return $protocol . "://" . $_SERVER['SERVER_NAME'] . $port . $_SERVER['REQUEST_URI'];
}
$UsConfigCache = UsConfigCache::getInstance($REDIS_CONFIG);

$UaClient = NULL;
$http_request_method = $_SERVER['REQUEST_METHOD'];

//////////////////////////////
///////// HTTP GET ///////////
//////////////////////////////

if ($http_request_method == 'GET') {
    /*
    // XXX for future restful API implementation
    $url = full_url();
    $url_data =  parse_url($url);
    if (!$url_data) {
        do_response(500, 50000, "Internal error");
    }
    */

    $id = @$_GET['id'];
    if (!$id) {
        do_response(400, 400, 'Incorrect Input.');
    }
    UsSecurity::filter_xss($id);
    $id = trim($id);
    // TODO ID validator

    $UserClient = new UserClient($UsConfigCache);

    // FIXME hardcode here
    $data = $UserClient->getAll("$id");
    if (!is_array($data) || count($data) <= 0) {
        do_response(404, 40400, 'User not found');
    } else {
        $data['user_id'] = $id;
        do_response(200, 20000, "OK", $data);
    }
}

//////////////////////////////
///////// HTTP POST ///////////
//////////////////////////////

try {
    $UserClient = new UserClient($UsConfigCache);
} catch (Exception $e) {
    // ignore exception.
}

// TODO SECURITY XSS filter
// TODO SECURITY add crumb check for member_id (must be generated by the core/random/ api)


$json = @$_POST['data'];
//$json = filter_var($json,);
//die($json);

// 2013.08.03 11:45 = 1375501500
// 2013.08.03 13:30 = 1375507800
// room 102 = 1:0:4:1
// room 101CD = 1:11:9:1
$sample_json = <<<EOF
{
    "request_data": {
        "user_id":"{user_id}",
        "nickname":"{nickname}",
        "facebook_id":"{facebook_id}"
    }
}
EOF;

// Uncomment it only when debugging
//$json = $sample_json;

$req_array = NULL;
if (empty($json) || ($req_array = json_decode($json, true)) === NULL) {
    do_response(400, 40000, "Incorrect input");
}

// When request not empty
$status = 20000;
isset($req_array['request_data']) || $status = 40001;
isset($req_array['request_data']['user_id']) || $status = 40003;

if (20000 !== $status) {
    do_response(400, $status, "Incorrect input");
}

$user_id = $req_array['request_data']['user_id'];
$nickname = @$req_array['request_data']['nickname'];
$facebook_id = @$req_array['request_data']['facebook_id'];

if (strlen($user_id) > 20 || mb_strlen($nickname, 'UTF-8') > 20 || strlen($facebook_id) > 20) {
    do_response(400, 40000, "Incorrect input");
}


UsSecurity::filter_xss($user_id);
UsSecurity::filter_xss($nickname);
UsSecurity::filter_xss($facebook_id);

$data_array = array();
if ($nickname) {
    $data_array['nickname'] = $nickname;
}
if ($facebook_id) {
    $data_array['facebook_id'] = $facebook_id;
}

if (count($data_array) <= 0) {
    do_response(400, 40002, "Oops, empty input");
}

if ($UserClient) {
    // Duplication protection
    $is_exists = $UserClient->redis_sIsMember('SET:User', $user_id);
    if (!$is_exists) {
        do_response(400, 40001, "Oops, user_id not exists");
    }

    // insert
    $res = $UserClient->set($user_id, $data_array);
    // TODO imlement update
    if ($res) {
        // TODO remember user cookie.
        do_response(200, 20000, "OK");
    } else {
        do_response(500, 50000, "Internal error");
    }
} else {
    do_response(500, 50001, "Storage error");
}
